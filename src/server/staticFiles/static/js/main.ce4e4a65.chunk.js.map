{"version":3,"sources":["apis/api.js","configs.js","components/Header/LoginButton.js","components/Header/Header.js","components/ChatList/AddChatButton.js","components/ChatList/ChatItem.js","components/ChatList/ChatList.js","components/NoRoomSelected/NoRoomSelected.js","components/ChatRoom/ChatRoom.js","components/Modal/Modal.js","components/ModalViews/CreateRoom.js","components/NotLoggedIn/NotLoggedIn.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","withCredentials","headers","LoginButton","token","setToken","logout","a","api","get","validateToken","useCallback","res","isAuthSuccess","status","data","useEffect","onClick","className","href","AddChatButton","setModalComponent","style","marginTop","ChatItem","selectChat","selectedChat","_id","roomName","lastMessage","author","content","ChatList","availableChats","setSelectedChat","map","chat","key","NoRoomSelected","margin","ChatRoom","socket","useState","messages","setMessages","currentMessage","setCurrentMessage","error","setError","getMessages","postMessage","post","chatroom","setMessage","e","target","value","length","on","m","chatRoom","prev","off","message","name","first","last","onKeyDown","onChange","placeholder","flexGrow","marginRight","color","Modal","modalComponent","children","closeModal","stopPropagation","CreateRoom","createNewRoom","setRoomName","emailInput","setEmailInput","participantsToAdd","setParticipantsToAdd","addParticipant","p","email","indexOf","user","response","type","display","disabled","NotLoggedIn","App","chats","setChats","setSocket","participants","getChats","useMemo","then","catch","console","log","socketIOClient","emit","room","disconnect","renderModalContent","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce4e4a65.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {URL} from '../configs';\r\n\r\nexport default axios.create({\r\n    baseURL: `${URL}/api`,\r\n    withCredentials: true,\r\n    headers: {\r\n      \"Access-Control-Allow-Credentials\": true\r\n    }\r\n  });","//export const URL = \"http://localhost:3000\";\r\n// export const URL = \"https://chat-app227.herokuapp.com\";\r\nexport const URL = \"\";\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport { URL } from \"../../configs\";\r\nimport api from \"../../apis/api\";\r\n\r\nconst LoginButton = ({ token, setToken }) => {\r\n  const logout = async () => {\r\n    await api.get(\"/auth/logout\");\r\n    setToken(null);\r\n  }\r\n\r\n  const validateToken = useCallback(async () => {\r\n      try {\r\n        const res = await api.get(\"/auth/test\");\r\n        const isAuthSuccess = res.status >= 200 || res.status <= 299;\r\n        if(isAuthSuccess)\r\n          setToken(res.data);\r\n        else\r\n          setToken(null);\r\n      }\r\n      catch {\r\n        setToken(null);\r\n      }\r\n\r\n    }, [setToken]);\r\n\r\n  useEffect(() => {\r\n    validateToken();\r\n  }, [validateToken]);\r\n\r\n  if (!token)\r\n    return (\r\n      <a href={`${URL}/api/auth/google`} className=\"login-btn\">\r\n        Log in\r\n      </a>\r\n    );\r\n  return (\r\n    <p onClick={logout} className=\"login-btn\">\r\n      Log out\r\n    </p>\r\n  );\r\n};\r\nexport default LoginButton;\r\n","import \"./Header.css\";\r\nimport LoginButton from \"./LoginButton\";\r\nimport React from \"react\";\r\n\r\nexport default ({ token, setToken }) => {\r\n  return (\r\n    <div className=\"header-container\">\r\n      <h1 className=\"logo\">CHAT-APP</h1>\r\n      <LoginButton token={token} setToken={setToken} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function AddChatButton({ setModalComponent }) {\r\n  return (\r\n    <button\r\n      className=\"button\"\r\n      style={{ marginTop: \"1rem\" }}\r\n      onClick={() => setModalComponent(\"CreateRoom\")}\r\n    >\r\n      New Room\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ChatItem.css\";\r\n\r\nexport default function ChatItem({ data, selectChat, selectedChat }) {\r\n  const activeStyle = () => {\r\n    if (!selectedChat) return \"\";\r\n    return selectedChat._id === data._id ? \"chat-item-active\" : \"\";\r\n  };\r\n  return (\r\n    <div className={`chat-item ${activeStyle()}`} onClick={selectChat}>\r\n      <h3>{data.roomName}</h3>\r\n      {data.lastMessage && (\r\n        <p>\r\n          {data.lastMessage.author}: {data.lastMessage.content}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport AddChatButton from \"./AddChatButton\";\r\nimport ChatItem from \"./ChatItem\";\r\nimport \"./ChatList.css\";\r\n\r\nexport default function ChatList({\r\n  availableChats,\r\n  setModalComponent,\r\n  setSelectedChat,\r\n  selectedChat,\r\n}) {\r\n  return (\r\n    <div className=\"chat-list-container\">\r\n      <div className=\"chat-list-bg\">\r\n        <h2 className=\"chat-list-title\">Rooms:</h2>\r\n        {availableChats.map((chat) => (\r\n          <ChatItem\r\n            key={chat._id}\r\n            data={chat}\r\n            selectedChat={selectedChat}\r\n            selectChat={() => setSelectedChat(chat)}\r\n          />\r\n        ))}\r\n        <AddChatButton setModalComponent={setModalComponent} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NoRoomSelected() {\r\n  return (\r\n    <div style={{ margin: \"2rem\" }}>\r\n      Select a chat room to view its messages!\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport api from \"../../apis/api\";\r\nimport NoRoomSelected from \"../NoRoomSelected/NoRoomSelected\";\r\nimport \"./ChatRoom.css\";\r\n\r\nexport default function ChatRoom({ chat, socket }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const getMessages = useCallback(async () => {\r\n    const res = await api.get(`/message/${chat._id}`);\r\n    if (res.status >= 200 && res.status <= 299) {\r\n      setMessages(res.data);\r\n    }\r\n  }, [setMessages, chat]);\r\n\r\n  const postMessage = async () => {\r\n    if (currentMessage === \"\") return;\r\n    const res = await api.post(\"/message\", {\r\n      content: currentMessage,\r\n      chatroom: chat._id,\r\n    });\r\n    if (res.status >= 200 && res.status <= 299) {\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const setMessage = (e) => {\r\n    if (e.target.value.length > 255) {\r\n      setError(\"Max message length reached\");\r\n    } else {\r\n      setCurrentMessage(e.target.value);\r\n      setError(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chat == null) return;\r\n    getMessages();\r\n  }, [chat, getMessages]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"new message\", (m) => {\r\n      if (m.chatRoom === chat._id) setMessages((prev) => [...prev, m]);\r\n    });\r\n    return () => socket.off(\"new message\");\r\n  }, [socket, chat]);\r\n\r\n  const renderMessages = () => {\r\n    return messages.map((message) => (\r\n      <div key={message._id}>\r\n        {/* {message.createdAt} */}\r\n        <p>\r\n          {message.author.name.first} {message.author.name.last}:{\" \"}\r\n          {message.content}\r\n        </p>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderRoom = () => {\r\n    if (!chat) return <NoRoomSelected />;\r\n    return (\r\n      <>\r\n        <h1 className={\"room-name\"}>{chat.roomName}</h1>\r\n        <div className=\"messages-container\">{renderMessages()}</div>\r\n\r\n        <div className=\"message-input\">\r\n          <input\r\n            value={currentMessage}\r\n            onKeyDown={(e) => e.key === \"Enter\" && postMessage()}\r\n            onChange={setMessage}\r\n            placeholder=\"your message\"\r\n            style={{ flexGrow: \"1\", marginRight: \"3px\" }}\r\n          />\r\n          <button onClick={() => postMessage()}>Submit</button>\r\n        </div>\r\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <div className=\"chat-room-container\">{renderRoom()}</div>;\r\n}\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nexport default function Modal({ modalComponent, setModalComponent, children }) {\r\n  if (modalComponent === \"\") return null;\r\n\r\n  const closeModal = () => setModalComponent(\"\");\r\n  return (\r\n    <div className=\"modal-bg\" onClick={closeModal}>\r\n      <div className=\"modal-container\">\r\n        <div onClick={(e) => e.stopPropagation()} className=\"modal\">\r\n          <div className=\"modal-header\">\r\n            <p style={{ color: \"white\" }}>Create room</p>\r\n            <button className=\"modal-close-button\" onClick={closeModal}>\r\n              X\r\n            </button>\r\n          </div>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport api from \"../../apis/api\";\r\nimport \"./CreateRoom.css\";\r\n\r\nexport default function CreateRoom({ createNewRoom }) {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n  const [participantsToAdd, setParticipantsToAdd] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const addParticipant = async () => {\r\n    if (participantsToAdd.map((p) => p.email).indexOf(emailInput) !== -1) {\r\n      setError(\"User is already in participants list\");\r\n      return;\r\n    }\r\n    try {\r\n      const res = await api.post(\"/user\", { email: emailInput });\r\n      const user = res.data;\r\n      setError(\"\");\r\n      setEmailInput(\"\");\r\n      setParticipantsToAdd((prev) => [...prev, user]);\r\n    } catch ({ response }) {\r\n      setError(response.data);\r\n    }\r\n  };\r\n\r\n  const handleRoomNameInput = (e) => {\r\n    if (e.target.value.length > 20) {\r\n      setError(\"Max room name length reached\");\r\n    } else {\r\n      setRoomName(e.target.value);\r\n      setError(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"form-container\">\r\n      <div className=\"input-row\">\r\n        <p className=\"label\">Room name:</p>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"New room name\"\r\n          value={roomName}\r\n          onChange={handleRoomNameInput}\r\n        />\r\n      </div>\r\n      <div className=\"input-row\">\r\n        <p className=\"label\">Email:</p>\r\n        <div style={{ display: \"flex\" }}>\r\n          <input\r\n            className=\"input\"\r\n            type=\"email\"\r\n            placeholder=\"Enter friend's email\"\r\n            value={emailInput}\r\n            onChange={(e) => setEmailInput(e.target.value)}\r\n          />\r\n          <button className=\"button\" onClick={addParticipant}>\r\n            Add!\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {participantsToAdd.map((user) => (\r\n        <p key={user._id}>\r\n          {user.name.first} {user.name.last}\r\n        </p>\r\n      ))}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      <button\r\n        className=\"button\"\r\n        disabled={roomName.length === 0}\r\n        onClick={() =>\r\n          createNewRoom(\r\n            roomName,\r\n            participantsToAdd.map((user) => user._id)\r\n          )\r\n        }\r\n      >\r\n        Create room!\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport LoginButton from \"../Header/LoginButton\";\r\nimport \"./NotLoggedIn.css\";\r\n\r\nexport default function NotLoggedIn({ token, setToken }) {\r\n  return (\r\n    <div className=\"not-logged-in-container\">\r\n      <p>Please log in with google to use this app</p>\r\n      <LoginButton token={token} setToken={setToken} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport Header from \"./components/Header/Header\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { URL } from \"./configs\";\r\nimport api from \"./apis/api\";\r\nimport ChatList from \"./components/ChatList/ChatList\";\r\nimport ChatRoom from \"./components/ChatRoom/ChatRoom\";\r\nimport Modal from \"./components/Modal/Modal\";\r\nimport CreateRoom from \"./components/ModalViews/CreateRoom\";\r\nimport NotLoggedIn from \"./components/NotLoggedIn/NotLoggedIn\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const [token, setToken] = useState(null);\r\n  const [chats, setChats] = useState([]);\r\n  const [selectedChat, setSelectedChat] = useState(null);\r\n  const [modalComponent, setModalComponent] = useState(\"\");\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  const createNewRoom = (roomName, participants) => {\r\n    api.post(\"/chatroom\", {\r\n      roomName,\r\n      participants,\r\n    });\r\n  };\r\n\r\n  const getChats = useMemo(\r\n    () => () => {\r\n      api\r\n        .get(\"/chatroom\")\r\n        .then((res) => setChats(res.data))\r\n        .catch(console.log);\r\n    },\r\n    []\r\n  );\r\n\r\n  const renderModalContent = () => {\r\n    switch (modalComponent) {\r\n      case \"CreateRoom\":\r\n        return <CreateRoom createNewRoom={createNewRoom} />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    const socket = socketIOClient(URL);\r\n    socket.on(\"requestAuth\", () => {\r\n      socket.emit(\"authenticate\", token);\r\n    });\r\n    socket.on(\"authFailed\", () => {\r\n      console.log(\"auth failed\");\r\n    });\r\n    socket.on(\"authSuccess\", () => {\r\n      console.log(\"auth success\");\r\n    });\r\n    socket.on(\"new room\", (room) => {\r\n      setChats((prev) => [...prev, room]);\r\n    });\r\n    setSocket(socket);\r\n    // clean up when done\r\n    return () => socket.disconnect();\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    getChats();\r\n  }, [token, getChats]);\r\n\r\n  const renderApp = () => {\r\n    if (!token) {\r\n      return <NotLoggedIn token={token} setToken={setToken} />;\r\n    }\r\n    return (\r\n      <div style={{ display: \"flex\", height: \"85vh\" }}>\r\n        <ChatList\r\n          availableChats={chats}\r\n          setModalComponent={setModalComponent}\r\n          setSelectedChat={setSelectedChat}\r\n          selectedChat={selectedChat}\r\n        />\r\n        <ChatRoom socket={socket} chat={selectedChat} />\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        modalComponent={modalComponent}\r\n        setModalComponent={setModalComponent}\r\n      >\r\n        {renderModalContent()}\r\n      </Modal>\r\n      <div>\r\n        <Header token={token} setToken={setToken} />\r\n        {renderApp()}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}